The PVMD Toolbox manual
=======================

Developed by PVMD group (Photovoltaic Materials and Devices Group) at Delft University of Technology.

.. _chapter-about:

1. About
--------

The PVMD TOOLBOX is a MATLAB-based software package developed by the PhotoVoltaic Materials and Devices Group (PVMD Group) at the Delft University of Technology, Delft, the Netherlands. It is a sophisticated tool that allows users to model the performance of solar photovoltaic systems with great detail and accuracy. The latest update to the toolbox comes with additional features to broaden its capabilities. This document is a user manual which extensively explains the inputs required to model solar PV performance and the respective outputs.

Within this chapter, :ref:`section-workflow` depicts the workflow adopted to perform the calculations, :ref:`section-inputs` explains the input variable, while the output variables from each computation are illustrated in :ref:`section-outputs`.

The toolbox includes the following sub-functions:

#. CELL - Compute and evaluate the performance of interested solar cell chemistry
#. MODULE - Calculate and visualize the optical performance of defined PV system
#. WEATHER - Determine the amount of energy absorbed by the solar cells before electrical conversion
#. THERMAL - Calculate the operational temperatures of the PV system
#. ELECTRIC - Compute the DC Energy output from the defined PV system
#. DEGRADATION - Enumerate degradation performance of chosen solar cell and PV system
#. CONVERSION - Compute the AC Energy output of the PV system for chosen inverter
#. FINANCIALS - Determine and visualize the Levelised Cost of Electricity (LCOE) of defined system

The functions are performed in the order specified in the aforementioned list whilst running the toolbox. Depending on the type of calculation, some of the sub-functions will be performed within other sub-functions or skipped entirely. This will be explained using a workflow diagram in this chapter. Moreover, the different possibilities of computations within the toolbox and the nature of the corresponding output variables will be defined in the later chapters of this user manual. The directory in which the sub-folders are stored looks like the one in :numref:`fig-toolbox-dir`, where each subfolder performs the function corresponding to its name. The other functions which are used will be explained in :ref:`chapter-use_tb`.

.. figure:: /doc_images/toolbox_directory.png
   :width: 400
   :name: fig-toolbox-dir
  
   The PVMD toolbox directory.

.. _section-workflow:

1.1 Workflow Diagram
~~~~~~~~~~~~~~~~~~~~

In this section, the general workflow diagram on how data flows between the various sections of the toolbox is presented. This is applicable for all use cases and also illustrates how functions are by-passed/run differently based on the nature of inputs. The workflow diagram associated with this version of the toolbox has been provided in :numref:`fig-workflow`.

.. figure:: ../doc_images/workflow_diagram.png
   :name: fig-workflow
  
   The PVMD toolbox workflow diagram.

In this workflow diagram, the rectangular blue containers represent the models that have been implemented in the PVMD Toolbox, while the green parallelogram containers represent the intermediate outputs. The workflow starts from the left hand side with the cell simulations (top-left), while the final and main outputs of the toolbox are the ones present in the circles on the right hand side of the diagram. The external/user inputs to the toolbox are represented using text (in black) present outside each computational step. Every time a user uses the toolbox, the outputs are determined based on this workflow.

.. _section-inputs:

1.2 Input Variable
~~~~~~~~~~~~~~~~~~

The input variable used in the calculations is called ``TOOLBOX_input``. This variable includes all user inputs and the respective paths of the files input while running the toolbox. The data stored in this variable is shown in :numref:`fig-inputs`.

.. figure:: ../doc_images/variables_inputs.png
   :width: 300
   :name: fig-inputs
  
   TOOLBOX inputs.

Within this dataset, every logical variable (such as ``script`` and ``runModulePart``) is added to the dataset when the corresponding function is run in the toolbox. All the other variables contain the user-input data for each section of the toolbox and these variables will be explained in detail in :ref:`chapter-use_tb`. Some variables in this dataset have the value of *Not a Number* (``NaN``), and this means those functions do not produce any outputs due to the nature of user inputs. Such cases will also be included in :ref:`chapter-use_tb`.

.. _section-outputs:

1.3 Output Variables
~~~~~~~~~~~~~~~~~~~~

The outputs from the simulations always follow the format ``FUNCTION_output``, where FUNCTION denotes the function performed using the toolbox. After performing all the operations, variables are stored in the base workspace in MATLAB as shown in :numref:`fig-outputs`.

.. figure:: ../doc_images/variables_output.png
   :width: 300
   :name: fig-outputs
  
   Output variables.

The variables stored within each output structure will be explained in :ref:`chapter-use_tb`.

.. _chapter-requisites:

2. Software pre-requisites
--------------------------

The new version of the PVMD toolbox requires additional software to run the newly added features. Care is to be taken to remember that not all software from this list is necessary, but they can be included as a part of the user's work package in order to run all possible functions in the toolbox.

2.1 Matlab
~~~~~~~~~~

As already mentioned, the PVMD toolbox has been almost entirely created on the MATLAB software. Some sections require add-ons to the basic MATLAB version. These add-ons are:

* Parallel computing toolbox add-on. This software is required for cell and module simulations when no previous results are loaded.
* Mapping toolbox add-on. This software is required if the horizon is to be recalculated from height map files.
* Optimization toolbox. This software is required for the electric simulations.

.. _section-asa:

2.2 ASA
~~~~~~~

The Advanced Semiconductor Analysis (ASA) simulator is a web-browser based software from TU Delft which is used for simulating the opto-electrical performance of solar cells quickly and efficiently [1]_.

.. admonition:: Remark

   This software is not necessary to run all the functions in the toolbox and only needed if the user would like to model the opto-electrical performance of another solar cell in detail.

.. note::

   ASA is a paid software. Free trial is available on request.
   
   In order to obtain ASA, visit its `website <https://asa.ewi.tudelft.nl>`__. To understand ASA better or to improve the software, please visit the `forum <https://www.tudelft.nl/ewi/over-de-faculteit/afdelingen/electrical-sustainable-energy/photovoltaic-materials-and-devices/software-platform/asa-software>`__.   

2.3 Radiance
~~~~~~~~~~~~

Radiance is a visual rendering tool which allows users to perform lighting and optical simulations using advanced techniques such as ray-tracing [2]_. This software is needed as a part of the toolbox to perform backward ray-tracing simulations involving very large files and complex geometric scenes, such as the ones encountered in non-periodic simulations.

.. admonition:: Remark

   Radiance needs to be installed only if non-periodic simulations are to be run.

In this section, the installation procedure for Radiance will be explained for different OS platforms. To learn more about the other capabilities of Radiance, visit its `website <https://www.radiance-online.org>`__.

.. note::
   For more information on Radiance, visit the `forum <https://discourse.radiance-online.org/>`__

2.3.1 Installation in Mac-OS
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To maximise user ease while using Radiance on Mac-Os, XQuartz (X11) can be installed as an add-on with Radiance. It is a compiler similar to the command prompt application ``Terminal``, but includes additional features specific to Radiance to maximise ease of use. It is preferred to use XQuartz instead of the actual command prompt to perform the commands of Radiance.

To install XQuartz, follow the steps:

* Download the latest version of `XQuartz <www.xquartz.org>`__.
* Run the disk image as the administrator and follow the instructions in the prompt to install XQuartz on the Mac-OS system.

.. note::
   This software is not necessary but can be used for exploring other Radiance functions used outside the PVMD Toolbox.

To obtain the latest package of Radiance, go to its `website <www.radiance-online.org>`__ and in the downloads tab one can install the software. This will redirect the user to the Github releases page. There are two files available, one is an installer with the extension *.pkg* and the other is a *.zip* file. Select the file with the *.pkg* extension, and follow the installation steps on prompt to complete installation.

After completing installation, it is important to add the environment variables (paths) to the shell. To do this, open the command prompt and type ``nano.bash_profile``. Within the pop-up window, copy and paste the following commands:

::

    export PATH=\$PATH:.:/usr/local/radiance/bin
    export RAYPATH=.:/usr/local/radiance/lib
    export MANPATH=\$MANPATH:/usr/local/radiance/man
    export MDIR=/usr/local/lib/ray/meta/

.. figure:: ../doc_images/radiance_add_variables_shell.png
   :width: 400
   :name: fig-radiance_shell
  
   Adding environment variables to the shell.

The command prompt looks like :numref:`fig-radiance_shell`, with the commands of interest highlighted in the red box. If the default shell is not bash, replace bash with name of the default shell being used in the system.

Finally, download the file `vchars.mta <http://www.radiance-online.org/cgi-bin/viewcvs.cgi/ray/lib/meta/vchars.mta?hideattic=0&revision=1.2&view=markup>`__. Move this file to the directory ``/usr/local/lib/ray/meta``.

2.3.2 Installation in Windows
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Windows users can directly install Radiance by downloading the *.exe* file from the `downloads page <https://floyd.lbl.gov/radiance/framed.html>`__ of the Radiance `website <www.radiance-online.org>`__. In the installation page, download the file with the *.exe* extension and run the file. Follow the instructions on the prompt to complete installation. Install and save the Radiance files in the directory ``C:\\Radiance``.

.. note::
   To verify if the installation was completed successfully, use the command ``man`` in the system command prompt to see if the files are installed properly. You can also use the command ``echo \$RAYPATH`` to check if the directory is correct. If any one of these commands generate an error, the installation was not completed correctly.

2.3.3 Adapt the path
^^^^^^^^^^^^^^^^^^^^

After installing Radiance, it is important to store this path as a variable in the MATLAB directory where the PVMD Toolbox is stored. In order to do this, perform the following steps:

* Open folder 2_MODULE/Non-Periodic/Inputs.
* Load the file *radiancepath.mat* in MATLAB.
* Re-write the data stored in this variable as:

  * For Mac-OS systems: ``/Users/username`` where *username* is the user of the PC
  * For Windows systems: ``C:\\Radiance\\bin``

If another directory is used, change the name of the variable stored in *radiancepath.mat* accordingly.

2.4 Rhino 3D
~~~~~~~~~~~~

RHINOCEROS, or Rhino in short, is a 3D CAD package which is required as a pre-processing software to download and export 3D files for use in non-periodic simulations. 

.. admonition:: Remark

   This software is not necessary to run all the functions in the toolbox and only needed in order to export 3D objects into the toolbox for non-periodic simulations. It is not important to know how Rhino works, but certain commands that allow the user to successfully export external geometries into the MATLAB environment.

In order to install Rhino, perform the following steps:

* Go to `software.tudelft.nl <http://software.tudelft.nl>`__
* Login with Net-ID
* Click on the latest version of Rhinoceros from the list of available softwares on the screen
* Download the installation manual and the installation file from the pop-up window as shown in :numref:`fig-rhino_installation` for the corresponding OS platform
* Follow the procedure in the manual to complete the installation

.. figure:: ../doc_images/rhino_installation.png
   :width: 500
   :name: fig-rhino_installation
  
   Installation of Rhinoceros.

.. note::
   Instead of Rhino, other CAD packages such as Blender or Autodesk can also be installed for the same purpose based on the user's own experience with CAD packages. Rhino is only recommend as its licence is freely provided by TU Delft for students and employees alike.

.. _subsection-units_tb:

2.4.1 Before running the toolbox
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Before running non-periodic simulations on MATLAB with a new 3D object, it is important to convert the file into the appropriate format.

* If the file was designed by the user on a CAD package:

  Use command Export/Save As to convert the 3D object into the format *.obj* (wavefront object file) and store it in the folder /Non-periodic simulations/3D files within the TOOLBOX

* If the file is to be obtained externally:

  This is an example workflow for obtaining 3D objects from the open-source 3D object library 3D Warehouse, from Google SketchUP. Export the SketchUP file in the format *.skp* and open it on Rhino. Once the file has been opened, export it to the *.obj* format. This is the recommended step for new users of the toolbox.

  If some other CAD package is used or some other source was used to design/obtain the 3D geometry, ensure that the files can be imported into the user's preferred CAD environment and exported as a *.obj* file for use in the toolbox.

A few steps are to be followed before exporting the geometry in the required format:

#. Open the geometry file on Rhino
#. Select the entire object and run the command ``MESH`` (:numref:`fig-rhino_meshing`)
#. Once the previous step is complete, select the entire object once again and run the command ``QUADRANGULATEMESH`` (:numref:`fig-rhino_remeshing`)
#. Once the previous step is complete, export the geometry file in order to use it in the toolbox

.. list-table:: 

    * - .. figure:: ../doc_images/rhino_meshing_surfaces.png
           :name: fig-rhino_meshing

           Meshing of un-meshed surfaces using ``MESH`` command

      - .. figure:: ../doc_images/rhino_quadrangulatemesh.png
           :name: fig-rhino_remeshing

           Surfaces re-meshing using ``QUADRANGULATEMESH`` command

Once these steps have been performed, remember to note the units down, as this data is important to include the panels in the scene. Only four units are accepted by the toolbox: *metres, inches, centimetres and millimetres*. If objects with other units are used, it will lead to errors in the scene. Care must be taken to ensure this, especially for objects obtained from external 3D libraries.

On exporting, two files are produced: the first is the *.obj* file, which includes geometric information, and the second is the *.mtl* file, which includes the material information. Both these files are used to load the 3d object and the procedure to do so will be explained in Chapter 3 of this manual.

.. _chapter-use_tb:

3. PVMD toolbox usage
---------------------

The PVMD Toolbox has two possible user workflows: one is using the interactive GUI in which each step involves the use of one or more sub-functions, or using the script version of the toolbox, where the entire toolbox is run at once. In this chapter, these two workflows will be illustrated in detail, along with the inputs that are used to perform the calculations.

3.1 The GUI Version
~~~~~~~~~~~~~~~~~~~

To open the GUI version, run the file in the directory named ``GUI_PVMDTOOLBOX.m``. This file also includes an explanation of what each function is in the comments of this file. Once you run the file, the GUI opens, which is shown in :numref:`fig-gui_main`.

.. figure:: ../doc_images/gui_main_window.png
   :width: 200
   :name: fig-gui_main
  
   The Toolbox GUI.

Once the GUI opens, the only variable present in the workspace will be ``TOOLBOX_input``, within which the only value stored will be the value ``script``, whose value will be ``false``. This is shown in :numref:`fig-gui_opened`.

.. figure:: ../doc_images/input_gui_opened.png
   :width: 300
   :name: fig-gui_opened

   ``TOOLBOX_input`` when GUI is opened.

In the following subsections, the procedure to provide user inputs for each subsection and how these values are stored in the variable ``TOOLBOX_input`` will be explained.

3.1.1 Cell
^^^^^^^^^^

1. Click on the CELL button in the GUI to start the cell level.

2. A dialog box pops up, as shown in :numref:`fig-cell_modelling_choice`, where a saved simulation can be opened or a simulation can be run.

.. figure:: ../doc_images/cell_modelling_choice.png
   :width: 300
   :name: fig-cell_modelling_choice

   Choose Modelling option - CELL.

*If Load saved simulation is selected:*

3. Choose the saved file to load the output variable ``CELL_output`` into the workspace. This is shown in :numref:`fig-cell_load_simulations`, where there is currently only one saved simulation corresponding to a mono PERC module.

.. figure:: ../doc_images/cell_load_simulations.png
   :width: 300
   :name: fig-cell_load_simulations

   Load saved simulation - CELL.

*If Run GenPro4 is selected:*

3. Choose the solar cell type on which the simulations are to be performed, as displayed in :numref:`fig-cell_genpro_simulation`. For more information on GenPRO, refer to the tutorial mentioned in [3]_.

.. figure:: ../doc_images/cell_genpro_simulation.png
   :width: 300
   :name: fig-cell_genpro_simulation

   Run new GenPRO simulation - CELL.

This starts running a new simulation and will take a few minutes to complete and outputs the variable `CELL_output`. Once completed, three plots are produced: two height maps of the cell and one plot displaying the cell's absorptivity as a function of the angle of incidence of light. Sample figures have been provided in this manual via :numref:`fig-cell_height_map` and  :numref:`fig-cell_absorptivity_plot`.

.. list-table:: 

    * - .. figure:: ../doc_images/cell_height_map.png
           :name: fig-cell_height_map

           Height map plot resulting from GenPRO simulation.

      - .. figure:: ../doc_images/cell_absorptivity_plot.png
           :name: fig-cell_absorptivity_plot

           Cell absorptivity plot resulting from GenPRO simulation.

This new variable includes a logical value to show if GenPro was used or not, while the second variable stores the user selected file for the simulations. If a saved simulation was loaded, then the logical value in :numref:`fig-input_after_cell` will be stored as ``false``.

.. figure:: ../doc_images/input_after_cell.png
   :width: 80 %
   :name: fig-input_after_cell

   TOOLBOX_input after CELL simulations.

The ``CELL_output`` variable holds the normalised absorptance, reflection and transmitted irradiance values at a cell level. Within this variable, the values are stored as a field in the structure, as shown in :numref:`fig-cell_output`.

.. list-table:: 

    * - .. figure:: ../doc_images/cell_output.png
           :name: fig-cell_output

           ``CELL_output`` variable.

      - .. figure:: ../doc_images/cell_output_cell_front.png
           :name: fig-cell_output_cell_front

           ``CELL_FRONT`` values stored inside ``CELL_output`` variable.

Every cell simulation includes these three values: the optical performance of the front side of the cell, the optical performance of the rear side and the cell type. To define the optical performance of the cell, a snippet of the variable ``CELL_FRONT`` is shown in :numref:`fig-cell_output_cell_front`. This variable has the values of reflectance, absorptance and transmittance ``RAT`` as a function of wavelength ``wav`` and angle of incidence ``aoi``. It also includes the layer definitions of the cell ``lay`` and the photocurrent values of the cell ``Jph``. For bifacial cells, the variable ``CELL_REAR`` will be similar to ``CELL_FRONT``.

3.1.2 Module
^^^^^^^^^^^^

To run the module level simulations, click the button MODULE in the GUI. This will open another GUI with two modelling options: Periodic and Non-periodic. In a periodic simulation, all the panels will have the same properties (such as incident energy, operating temperatures, etc.) while in non-periodic simulations these properties will vary from panel to panel.

3.1.2.1 Periodic Simulation
'''''''''''''''''''''''''''

1. On clicking the PERIODIC button, a dialog box similar to CELL opens: A user can load a saved simulation or run a new one.

*If Load saved simulation is chosen:*

2. Choose the cell technology similar to CELL module (refer to :numref:`fig-cell_load_simulations`)

3. Define the module mounting properties. This will output the variable ``MODULE_output`` (:numref:`fig-module_mounting_properties`). This data will be used for the irradiance and temperature calculations.

.. figure:: ../doc_images/module_mounting_properties.png
   :width: 300
   :name: fig-module_mounting_properties

   Define module mounting properties.

*If Perform ray tracing is chosen:*

2. Define the module and ground properties as shown in :numref:`fig-module_properties`. The module which will be used for the simulations will be displayed as in :numref:`fig-module_scenario`.

.. list-table:: 

    * - .. figure:: ../doc_images/module_properties.png
           :name: fig-module_properties
           :width: 300

           Window to define the module properties.

      - .. figure:: ../doc_images/module_scenario.png
           :name: fig-module_scenario

           Scenario of the module used for the ray-tracing simulations.

3. Define the number of rays used for the ray-tracing simulation in the pop-up window that will appear.

4. Define the type of sensitivity in the module by choosing between average or individual cell sensitivity.

Once the simulations are completed, the variable ``MODULE_output`` will be produced in the workspace. During the simulations, the sensitivity map [4]_ and the progress of the ray-tracing will be displayed as shown in :numref:`fig-module_ray_tracing` and  :numref:`fig-module_sensitivity_map`.

.. list-table:: 

    * - .. figure:: ../doc_images/module_ray_tracing.png
           :name: fig-module_ray_tracing

           The progress of the ray-tracing simulations is shown with the change in scenario.

      - .. figure:: ../doc_images/module_sensitivity_map.png
           :name: fig-module_sensitivity_map

           The progress of the ray-tracing simulations is shown with the change in sensitivity map.

The modifications in the variable ``TOOLBOX_input`` and the values stored in the variable ``MODULE_output`` will be explained in :ref:`subsection-module_output`.

.. _subsection-module_non_per:

3.1.2.2 Non-periodic Simulation
'''''''''''''''''''''''''''''''

.. note::
   If a non-periodic simulation is run, WEATHER part is skipped.

On clicking the NON-PERIODIC button, a dialog box pops up requesting the user to load existing results or to run a new simulation. Choosing option 1 (load existing results) will directly output the variables ``MODULE_output`` and ``WEATHER_output``.

On running a new simulation, another GUI pops up to perform the various sub-tasks for non-periodic simulations (:numref:`fig-module_non_periodic_gui`).

.. figure:: ../doc_images/module_non_periodic_gui.png
   :width: 300
   :name: fig-module_non_periodic_gui
  
   GUI for running non-periodic simulations.

1. Load 3D object: Select the first button to load a 3D object. Again this gives two possibilities: 

*If load an existing 3D object is chosen*

   Loading an existing file will directly load the data into the variable ``TOOLBOX_input``, as will be explained in the later part of this subsection. Move to step 3. Add PV Panels.

*If load a new object is chosen*

   If a new 3D object is to be loaded, select option *Load New 3D Scene*. A prompt will appear asking to choose the material file of the object you wish to load with *.mtl* extension (see :numref:`fig-module_material_choice`). Once the material file is selected, a second dialog box will prompt to select the corresponding geometry file with *.obj* extension.

.. figure:: ../doc_images/module_material_choice.png
   :width: 350
   :name: fig-module_material_choice
  
   Choose the material file.

2. Refine Surfaces: This step ensures the geometry is refined to eliminate parsing errors.

3. Add PV Panels: Click on this step to add the panels. Similar to the first step in a non-periodic simulation, a dialog box appears with two options: Load existing scene with panels or add panels to new scene. The first option loads the variable ``MODULE_output`` with the panel data from an existing dataset. Directly move to step 4. View Scene if the first option is selected.

Once this button is clicked, a dialog box appears asking the user to input the units with which the 3D object was designed. In :ref:`subsection-units_tb`, it was explained how to note the units for externally obtained 3D objects. Enter the units with which the model was designed (:numref:`fig-module_model_units`).

.. warning::
   The units can be meters, inches, millimetres or centimetres only.

.. figure:: ../doc_images/module_model_units.png
   :width: 300
   :name: fig-module_model_units
  
   Enter model units.

Enter the azimuth of the loaded 3D object or scene when prompted.

Now, a dialog appears with two options: either the panels can be placed beside the scene, or on a surface of the 3D object.

*If Place Modules beside 3D Object*

   Define the geometric properties of the module when prompted (as shown in :numref:`fig-module_properties`).

   Enter the distance (along both X & Y axes) from the 3D geometry where the panels will be placed in the scene, as shown in :numref:`fig-module_module_placement`.

.. figure:: ../doc_images/module_module_placement.png
   :width: 350
   :name: fig-module_module_placement
  
   Define the distance to place panels.

*If Place Modules on a surface of the 3D Object*:

.. warning::
   This option is not recommended as yet for complex scenes.

   Select the points on the surface of interest on which the panels are to be placed (see :numref:`fig-module_surface_selection`). The selected points are shown with red dots.

.. figure:: ../doc_images/module_surface_selection.png
   :width: 350
   :name: fig-module_surface_selection
  
   Select surface of interest to place panels.

   Define the geometric properties of the modules when prompted (refer :numref:`fig-module_properties`). Enter the distance (along the selected surface) from the edges to place the panels on the surface (refer :numref:`fig-module_module_placement`).

4. View Scene: This option is used to view the loaded 3D object or defined scene. On clicking this button, a dialog box appears where the user can choose if only the 3D object is to be viewed or the entire scene. On clicking either of the options, the user can choose from another dialog box if a surface assigned to a certain material is to be viewed, or the entire scene (see :numref:`fig-module_viewing_choice`). A few possibilities have been shown in :numref:`fig-module_view_object` to :numref:`fig-module_view_surface`.

.. figure:: ../doc_images/module_viewing_choice.png
   :width: 300
   :name: fig-module_viewing_choice
  
   Choose surface/object to view.

.. list-table:: 

    * - .. figure:: ../doc_images/module_view_object.png
           :name: fig-module_view_object

           Object view.

      - .. figure:: ../doc_images/module_view_scene_1.png
           :name: fig-module_view_scene_1

           Scene view.

      - .. figure:: ../doc_images/module_view_scene_2.png
           :name: fig-module_view_scene_2

           Scene view.

      - .. figure:: ../doc_images/module_view_surface.png
           :name: fig-module_view_surface

           Single surface view.

The user can also get information on the number of individual elements (polygons) constituting a surface and the total surface area count of the chosen surface or object.

5. Load Material Library: Click on this button to load the materials contained in the library used from `NASA's ECOSTRESS Library <https://ecostress.jpl.nasa.gov>`__, with the data modified for use in the PVMD Toolbox. The loaded material library on opening has three material reflectance values which are used in the ray-tracing simulations, as shown in :numref:`fig-module_material_library`.

.. figure:: ../doc_images/module_material_library.png
   :width: 350
   :name: fig-module_material_library
  
   Material Library.

5a. Update Material Library: Click on this button to make changes to the existing material property dataset. On clicking this button, the following pop-up appears:

.. figure:: ../doc_images/module_edit_material_library.png
   :width: 300
  
   Options to edit material library.

*If Add Materials is chosen:*

   Only add materials from the NASA ECOSTRESS Library. This option is not recommended as all materials are already present. Use only if a new version with additional material is available.

   Choose the folder containing the files from the ECOSTRESS library you wish to include in the toolbox.

*If Remove Materials is chosen:*

.. warning::
   This option is used to permanently delete material data files. Use this only if redundancies in material data are observed (mostly for developers).

   Select the materials from the list dialog box to remove the materials not required by the user.

.. figure:: ../doc_images/module_material_removal.png
   :width: 400
   :name: fig-module_material_removal
  
   Remove materials from library.

*If Update Radiance Channel values is chosen*:

   The PVMD Toolbox uses the property *Spectrally Integrated Albedo* to determine the reflectance property of a material assigned to a surface. Use this option to update the limits used to find this value, as shown in :numref:`fig-module_update_albedo`.

.. figure:: ../doc_images/module_update_albedo.png
   :width: 300
   :name: fig-module_update_albedo
  
   Update the Spectrally Integrated Albedo.

Refer to Appendix :ref:`appendix_A` for more information on Spectrally Integrated Albedo.

5b. View Material Reflectances: Click on this option to view the reflective properties of several materials in the toolbox. Once the user clicks this button, a dialog box similar to :numref:`fig-module_material_removal` appears, from which the user can make multiple selections to view the material properties for various materials. A snippet of the plot is shown below.

.. figure:: ../doc_images/module_plot_reflectivity.png
   :width: 350
  
   Material reflectivity plot.

6. Assign Materials: This option is used to assign materials to the surfaces defining the 3D object. The material properties of the solar cells have already been defined during the CELL block, so the user does not have to define them again. On selecting this option, the user is presented with four options as shown in :numref:`fig-module_material_assignation`.

.. figure:: ../doc_images/module_material_assignation.png
   :width: 350
   :name: fig-module_material_assignation
  
   User Options to assign materials.

*If Load Existing Opto-Geometric Dataset is chosen:*

   Data is directly loaded and stored in ``TOOLBOX_input``.

*If Assign data directly from *.mtl* file is chosen*:

   Material data is directly assigned to the surfaces and stored in ``TOOLBOX_input``. Enter the albedo of the ground when prompted.

.. warning::
   This option is not recommended as the reflective properties are incorrect. Refer to Appendix :ref:`appendix_A` for more information. 

*If Include Spectral data from ECOSTRESS Library is chosen:*

   Enter the reflectivity of the ground when prompted. Select the surface to assign the material as shown in :numref:`fig-module_surface_material` (multiple selection possible). Once selected, a prompt with the same layout will appear to choose the material to be assigned to this surface.

.. figure:: ../doc_images/module_surface_material.png
   :width: 400
   :name: fig-module_surface_material
  
   Select surface of interest.

Assign the subclass to the surface as displayed in :numref:`fig-module_assign_subclass`, according to the property of the material (eg: if the chosen material is a metal, choose metal as subclass).

.. note::
   Refer to Appendix :ref:`appendix_B` for information on subclass.

.. figure:: ../doc_images/module_assign_subclass.png
   :width: 300
   :name: fig-module_assign_subclass
  
   Assign subclass to material.

Perform all previous steps to assign materials to all surfaces in the 3D geometry.

7. Convert Files to Radiance: Click on this option to convert the user defined scene into the Radiance format to perform the ray-tracing. During this process, the user is asked to enter the number of testpoints used in the ray-tracing. This stands for the number of grid points in a cell, being 4 the maximum.

.. note::
   Refer to Appendix :ref:`appendix_B` for information on testpoints.

The path where the Radiance files will be stored will be explained later in this chapter.

8. Ray-trace: Click on this option to run the ray-tracing simulation. On clicking, the user is prompted to enter the timeframe of the simulation to be performed.

.. figure:: ../doc_images/module_period_assignation.png
   :width: 300
  
   Enter period for the simulations.

Select the climate file which has the weather data for the simulations as shown in :numref: `fig-module_climate_selection`.

.. figure:: ../doc_images/module_climate_selection.png
   :width: 350
   :name: fig-module_climate_selection
  
   Select the climate file.

When prompted, write Yes ``Y`` or No ``N`` in the command window to include horizon reconstruction at chosen location.

*If Yes is chosen:*

   Enter the latitude and longitude of the location when prompted.

.. figure:: ../doc_images/module_location_details.png
   :width: 400
  
   Enter location details.

Again, when prompted, write Yes ``Y`` or No ``N`` in the command window to re-calculate the horizon parameters or to use an existing file.

*Again, if Yes is chosen:*

   Enter in the command window the radius of interest to be used to re-generate the horizon when prompted in the command window. When the pop-up appears, choose the LiDAR file [5]_ used to re-generate the horizon.

.. note::
   Refer to Appendix :ref:`appendix_C` on how to download *.tif* files.

The ray-tracing is performed as soon as these inputs are provided. 

9. View Results in the GUI. This presents three options:

.. figure:: ../doc_images/module_view_choices.png
   :width: 250
  
   Choices to view results.

*View Results for a single time interval*: Enter the time instant at which the result is to be used. The format ``DD-Mon HH:MM`` such as in ``04-Jan 14:00`` needs to be used. The result of a non-periodic simulation for a single time instant is illustrated below.

.. figure:: ../doc_images/module_single_time_results.png
   :width: 350
  
   Results for a single time instant.

*View monthly results*: Enter the month for which the results are to be viewed in a similar format as previous option.

*View results for a year*: Whole yearly period is selected.

Once the simulations are run, the variable ``WEATHER_output`` will also be created.

.. _subsection-module_output:

3.1.2.3 Output variable
'''''''''''''''''''''''

``MODULE_output`` houses the variables associated with the module level simulations in the toolbox. A snapshot of the variables is shown in Figure :numref:`fig-module_output`.

.. figure:: ../doc_images/module_output.png
   :width: 400
   :name: fig-module_output
  
   ``MODULE_output`` variable.

Within ``MODULE_output``, the variable ``TYPE`` defines if the modules are electrically reconfigurable or not. The skydome is used to determine the irradiance on the modules, along with the Sensitivity Map ``SM-f`` of the solar cells. The values ``N``, ``A`` and ``Amod`` represent the number of cells, area of a cell and area of the module respectively. Finally, the module tilt is also stored in this struct. For non-periodic simulations, the values ``SM-f``, ``skydome`` and ``wav`` are replaced by ``NaN``.

The variable ``TOOLBOX_input`` is now updated with the user inputs for the module simulations:

.. figure:: ../doc_images/input_after_module.png
  
   The updated ``TOOLBOX_input`` variable after MODULE.

The variable now includes the fields which include the user inputs from MODULE simulations. The variable ``runPeriodic`` will be ``true`` if the periodic simulation was run in the toolbox. Moreover, the values from irradiation will be generated only in the WEATHER part for the periodic simulations and therefore will be discussed in next subsection.

Within the field ``Scene``, the data related to the 3D geometry input into the toolbox and the geometric properties of the modules are stored. This also includes the opto-geometric data set (with materials assigned to the surfaces), the arrangement of the cells and modules in the scene and the path where the Radiance files are stored. This concludes the MODULE simulations and next comes WEATHER.

3.1.3 Weather
^^^^^^^^^^^^^

.. note::
   Proceed to THERMAL directly if non-periodic simulation is performed, the WEATHER button on the GUI gets disabled on selection. The variable ``WEATHER_output`` is however explained in this section.

1. On starting the WEATHER simulations, the first thing that appears is a dialog box requesting the user to choose the location where the irradiance is to be calculated.

.. figure:: ../doc_images/weather_location_choice.png
   :width: 350
  
   Choose weather location.

2. When prompted, enter the timeframe for the simulation. The initial day and month as well as the final day and month for the simulations need to be provided. Months are expressed here with values between 1 and 12.

3. Choose from the pop-up menu whether to reconstruct the horizon or not. If yes is chosen, the user is once again prompted to enter the choice of using an existing data set or run a new calculation.

*If the horizon is to be reconstructed*

   Enter the location and simulation details when prompted via a dialog box. The radius variable represents the area around the location to be used for the horizon reconstruction.

.. figure:: ../doc_images/weather_horizon_details.png
   :width: 350
  
   Information required to reconstruct the horizon.

The user is requested to select the LiDAR file in *.tif* extension [5]_ for the horizon calculations thereafter.

.. note::
   Refer to Appendix :ref:`appendix_C` on how to download *.tif* files.

:numref:`fig-weather_reconstructed_horizon` below shows an example of a reconstructed horizon.

.. figure:: ../doc_images/weather_reconstructed_horizon.png
   :width: 350
   :name: fig-weather_reconstructed_horizon
  
   Example of the reconstructed horizon for the location in the markt of Delft.

This performs the weather calculations, and the sky map is displayed [6]_ [7]_ when the simulation is being performed. A snippet of the plot generated mid-calculation is shown below.

.. figure:: ../doc_images/weather_sky_map.png
   :width: 350
  
   Sky map during WEATHER simulations.

Once the simulations are completed, the variable ``WEATHER_output`` is generated. It includes the data from the weather simulations, such as the module performance and other site related data. The data stored in this variable has been depicted in :numref:`fig-weather_output`.

.. figure:: ../doc_images/weather_output.png
   :width: 400
   :name: fig-weather_output
  
   WEATHER_output variable.

The variables ``A`` and ``J`` contain the absorptance data and photocurrent for every cell at each time-step of the simulation. The variable ``Period`` signifies the period in time used for the simulations. The other datasets which are present include the global horizontal irradiance ``Irr``, the ambient temperature and wind speed at the site. The variables ``RH``, ``UVa`` and ``UVb`` are used during the degradation simulations to compute panel degradation performance. For non-periodic simulations, the values of absorptance and photocurrent are stored per module, in the form of a cell dataset and each cell denotes the properties for a single module.

The variable ``TOOLBOX_input`` gets updated as follows: A new field ``irradiation`` is included, which includes the data from the WEATHER simulations, such as the chosen location and climate file, duration of simulations and whether horizon data was included in the simulations. A snippet of the dataset is shown below.

.. figure:: ../doc_images/input_after_weather.png
  
   The updated ``TOOLBOX_input`` variable after WEATHER.

3.1.4 Thermal
^^^^^^^^^^^^^

The THERMAL block is used to calculate the cell temperatures during the desired frame of simulation [8]_. On clicking the button, the user is asked to input the temperature coefficients of the cell and this is the only set of inputs used in the calculations. A picture of the prompt after the user clicks this button is shown in :numref:`fig-thermal_user_input`.

.. figure:: ../doc_images/thermal_user_input.png
   :width: 400
   :name: fig-thermal_user_input
  
   User inputs for THERMAL.

Once the thermal calculations are completed, the plots related to the simulations are generated: cell temperatures (:numref:`fig-thermal_temperature`), sunniest period (:numref:`fig-thermal_sunniest_day`) and irradiation plot (:numref:`fig-thermal_irradiation`). The plots which are generated for the non-periodic simulations will be a combination of subplots, with the same data for each module present in the scene.

.. list-table:: 

    * - .. figure:: ../doc_images/thermal_temperature.png
           :name: fig-thermal_temperature

           Module temperature plot.

      - .. figure:: ../doc_images/thermal_sunniest_day.png
           :name: fig-thermal_sunniest_day

           Sunniest day from selected period.

      - .. figure:: ../doc_images/thermal_irradiation.png
           :name: fig-thermal_irradiation

           Daily irradiation plot.

The output variable ``THERMAL_output`` stores the temperatures of each cell during each time-step of the simulation in sub-variable ``T``. Again, this variable is converted to a cell dataset for non-periodic simulations.

.. figure:: ../doc_images/thermal_output.png
   :width: 400
  
   ``THERMAL_output`` variable.

The input variable ``TOOLBOX_input`` has been updated with the field ``thermal``, which includes the user input thermal coefficients at the start of the simulations.

.. figure:: ../doc_images/input_after_thermal.png
  
   The updated ``TOOLBOX_input`` variable after THERMAL.

3.1.5 Electric
^^^^^^^^^^^^^^

This function is used to compute the DC Energy yield of the designed PV system. On clicking the button, the first option that appears is the option to choose between data sheet values and model cell values. The model cell values can be modified with data from the ASA simulator if the user wants to do so.

*If Datasheet is chosen:*

1. Enter the parameters such as Voc and Isc when prompted by MATLAB. If the chosen cell is a tandem, then the user will be prompted twice to enter the properties of both the top and bottom cells.

.. figure:: ../doc_images/electric_electric_properties.png
   :width: 300
  
   Enter the solar cell electrical properties.

*If Model Cells is chosen:*

1. Choose the model cell file from the dialog box to be used for the simulations. These are pre-loaded values obtained from the ASA simulations.

.. figure:: ../doc_images/electric_model_choice.png
   :width: 300
  
   Choose model cell for electrical simulations.

2. When prompted in the command window, enter if the modules are electrically re-configurable or not by typing ``Y`` or ``N`` [9]_.

.. note::
   Only 96 cell modules with a configuration of 12x8 or 8x12 are reconfigurable.

3. Choose the option to define the metallization losses of the solar cell.

.. figure:: ../doc_images/electric_metallization.png
  
   User options for metallization losses.

*If Ignore metallization losses is chosen*

   Move to step 4.

*If Give shading and resistance values is chosen*

   Define the resistance and shading losses values when prompted by the GUI.

.. figure:: ../doc_images/electric_metallization_losses.png
   :width: 300
   
   Enter resistance and shading loss values.

*If Detailed model for metallization is chosen*

   Enter the requested parameters when prompted.

.. figure:: ../doc_images/electric_metallization_detailed_losses.png
   :width: 300

   Detailed model for metallization losses.

4. Define the number of bypass diodes present in the modules, being 0, 3 and 6 the only possible options.

5. Once the simulation is run, the user is prompted to enter the time at which the IV curve of the module is to be plotted. The details requested are: month (as an integer between 1 and 12), day and hour (as an integer between 0 and 23).

The user is presented with two plots when the simulation is completed: a comparison between the incident energy and the DC Energy Yield (:numref:`fig-electric_dc_energy`), and the IV curve of the module (:numref:`fig-electric_iv_curve`).

.. list-table:: 

    * - .. figure:: ../doc_images/electric_dc_energy.png
           :name: fig-electric_dc_energy

           Resulting DC energy plot from ELECTRIC simulation.

      - .. figure:: ../doc_images/electric_iv_curve.png
           :name: fig-electric_iv_curve

           IV curve plot.

The ELECTRIC simulations produce the output ``ELECTRIC_output``. This output variable consists of those parameters which define the DC electrical performance and DC energy yield of the user-defined PV system. :numref:`fig-electric_output` shows the variables stored within this dataset.

.. figure:: ../doc_images/electric_output.png
   :width: 400
   :name: fig-electric_output
  
   ``ELECTRIC_output`` variable.

Within this structure, the values of short-circuit current ``Isc``, open-circuit voltage ``Voc`` and maximum power point (MPP) parameters (current, voltage and power) are stored for both operating and Standard Temperature Conditions (STC). Along with these variables, the DC energy yield is stored in the variable ``DCP`` for every time-step in the simulation. Again, these variables are replaced by a cell for non-periodic simulations. The final two variables represent the evolution of maximum power of the panels due to panel degradation year-on-year. These variables are appended to ``ELECTRIC_output`` after running the degradation simulations. Therefore, these values are included only when degradation is computed and is not present otherwise.

The input variable ``TOOLBOX_input`` is updated after the ELECTRIC simulations and now includes the field ``electric``, where all the inputs for the electrical simulations are stored. Some of the variables are empty or missing due to the choices made in the simulation, and an example of how the dataset looks like is shown in :numref:`fig-input_after_electric`.

.. figure:: ../doc_images/input_after_electric.png
   :name: fig-input_after_electric
  
   The updated ``TOOLBOX_input`` variable after ELECTRIC.

3.1.6 Degradation
^^^^^^^^^^^^^^^^^

.. note::
   Outputs results only for yearly simulations, otherwise output is stored as ``NaN``.

This sub function is used to visualize how the performance of the modules degrade year-on-year. On clicking the GUI button, the user is first asked to input the number of years for which panel degradation is to be simulated, being 50 the maximum possible. 

The user is then presented with three options to model the degradation via a list dialog box.

.. figure:: ../doc_images/degradation_modelling_choice.png
   :width: 300
  
   Choose modelling option for degradation.

*If User defined Degradation Rate is chosen:*

   The user is prompted via the command window to enter the percentage degradation rate.

*If Approximate Power Degradation using Kaaya Model is chosen \[14\]:*

   No external inputs necessary. The module specific degradation behaviour from Kaaya *et al.* [10]_ is assumed and the climate specific aspect is calculate based on the weather data.

*If Detailed Degradation using Kaaya Model is chosen:*

   When prompted, enter ``Y`` for *yes* and ``N`` for *no* if degradation parameters are to be calculated using data for the silicon module. No values are used when ``N`` is selected. If ``Y`` is selected, then the default values for silicon will be input.

.. warning::
   Detailed degradation model is extremely time intensive and thus not recommended

Once the degradation calculations are completed, the plots related to the degradation performance of the modules are displayed on the screen. For non-periodic simulations, this data is shown for each module present in the scene.

.. figure:: ../doc_images/degradation_plots.png
   :width: 350
  
   Plots from DEGRADATION.

The output variable from this simulation is ``DEGRADATION_output``. This variable holds the values pertaining to the degradation rate of the chosen PV panel during the lifetime or work life of the system. Therefore, this variable holds the values related to the contribution of each physical phenomenon to the degradation of the PV panels and the evolution of the normalised power output of the system during its lifetime as shown in :numref:`fig-degradation_output` (for the Kaaya model). The values starting with ``R`` in Figure 3.55 denote the degradation rates of the panel due to various physical phenomenon.

.. note::
   The values stored in the variables change if the chosen user inputs are different. Test the different choices to learn about the nature of the outputs.

Within ``DEGRADATION_output``, the variable ``NORMALIZEDPOWER_output`` stores the normalised power of the system during its entire lifetime and also holds the values of each phenomenon contributing to the degradation of panel performance, stored in the variables starting with ``PR``. This is shown in :numref:`fig-degradation_normalized_power`. For non-periodic simulations, all values are stored in the form of a cell.

.. list-table:: 

    * - .. figure:: ../doc_images/degradation_output.png
           :name: fig-degradation_output

           ``DEGRADATION_output`` variable.

      - .. figure:: ../doc_images/degradation_normalized_power.png
           :name: fig-degradation_normalized_power

           Variable ``NORMALIZEDPOWER_output`` within ``DEGRADATION_output``.

The input variable ``TOOLBOX_input`` holds the field ``Degradation``, which again, stores the inputs provided by the user during the degradation simulations.

.. figure:: ../doc_images/input_after_degradation.png
  
   The updated ``TOOLBOX_input`` variable after DEGRADATION.

3.1.7 Conversion
^^^^^^^^^^^^^^^^

This function is used to compute the AC energy yield of the defined PV system. On clicking the GUI, the user is requested to enter the type of inverter to be used in the simulations.

.. figure:: ../doc_images/conversion_inverter_type.png
   :width: 300
  
   Choose inverter type.

*If central or string inverter is chosen*

1. When prompted in the command window, enter the number of strings present in the PV system. For periodic simulations, the user also has to enter the number of modules in parallel.

2. Choose the inverter to be used in the simulations from the list that appears on the screen (:numref:`fig-conversion_inverter_model`) \[15\].

.. figure:: ../doc_images/conversion_inverter_model.png
   :width: 350
   :name: fig-conversion_inverter_model
  
   Choose inverter model for the simulations.

*If micro inverter is chosen*

1. When prompted, enter the total number of modules in the PV system.

2. Choose the inverter to be used in the simulations from the list that appears on the screen (as in :numref:`fig-conversion_inverter_model`) [11]_.

*If power optimizer is chosen*

1. A dialog box will be prompted to select the manufacturer of the power optimizer. Two options are given: *Solar Edge* or *User specified*. The latter option is not recommended for non advanced users since it requires a template to be filled (refer to Appendix :ref:`appendix_D` for more information). Therefore, select *Solar Edge* from the dialog box.

2. From the List of power optimizers which are displayed, choose the one of interest.

.. figure:: ../doc_images/conversion_power_optimizer.png
   :width: 350
  
   Choose power optimizer model.

.. warning::
   If a maximum voltage warning is displayed, rerun the CONVERSION simulation and choose another power optimizer with higher input voltage.

When prompted in the command window, enter ``Y`` if a central inverter is to be added to the simulation, otherwise enter ``N``.

*If* ``Y`` *is chosen*

Choose *Solar Edge* from the list dropdown as explained during the selection of the power optimizer manufacturer. Choose the inverter of interest from the list of inverters displayed.

.. figure:: ../doc_images/conversion_inverter_power_optimizer.png
   :width: 350
   
   Choose central inverter model for power optimizer.

Enter the number of strings when prompted in the command window. For periodic simulations, the user also has to enter the number of modules in parallel.

3. Enter yes ``Y`` or no ``N`` in the command window to include cable losses in the simulations. If ``N`` is chosen, then cable losses are skipped.

*If ``Y`` is chosen*

4. Choose whether to have a detailed simulation or a fixed percentage of cable losses from the list.

*If Fixed Percentage for Cable Losses is chosen*

   Specify the overall cable loss percentage in the dialog box when prompted.

*If Detailed Calculation is chosen*

   Enter the requested parameters from the interactive dropdown dialog box for defining the cable properties of the string (:numref:`fig-conversion_cable_properties`).

.. figure:: ../doc_images/conversion_cable_properties.png
   :width: 350
   :name: fig-conversion_cable_properties
  
   String cable properties.

Enter the requested parameters from the interactive dropdown dialog box for defining the cable properties of the inverter (dialog box similar to one in :numref:`fig-conversion_cable_properties`).

5. When prompted, enter ``Y`` if the results are to be plotted for the simulations, else enter ``N``. If results are to be plotted, two plots are produced: the inverter efficiency plot (:numref:`fig-conversion_inverter_efficiency`) and the inverter AC output plot (:numref:`fig-conversion_ac_power`).

.. list-table:: 

    * - .. figure:: ../doc_images/conversion_inverter_efficiency.png
           :name: fig-conversion_inverter_efficiency

           Resulting inverter efficiency plot from CONVERSION simulation.

      - .. figure:: ../doc_images/conversion_ac_power.png
           :name: fig-conversion_ac_power

           Resulting AC output plot.

The outputs from the CONVERSION simulation are stored in the variable ``CONVERSION_output``. This variable stores the parameters related to the AC Energy Yield of the designed PV system, based on the inverter type and configuration chosen by the user. This struct therefore includes the variables defining overall inverter efficiency ``eff_overall``, inverter efficiency at every time-step in the simulation ``eff`` and the overall AC power output ``Pac``. This variable also includes the DC power input ``Pdc`` to the inverter based on the system configuration (such as a central/string inverter). This is denoted by variable ``INV_TYPE``. An example of this variable is depicted in :numref:`fig-conversion_output`. Similar to other functions, these variables are stored in a cell for Non-periodic simulations.

.. figure:: ../doc_images/conversion_output.png
   :width: 400
   :name: fig-conversion_output
  
   ``CONVERSION_output`` variable.

The input variable ``TOOLBOX_input`` is updated with the inclusion of the field ``Conversion``. This field includes the data related to configuration of the PV system and the data obtained from the cable loss calculations (:numref:`fig-input_after_conversion`).

.. figure:: ../doc_images/input_after_conversion.png
   :name: fig-input_after_conversion
  
   The updated ``TOOLBOX_input`` variable after CONVERSION.

3.1.8 Financials
^^^^^^^^^^^^^^^^

.. note::
   Financial calculations are only performed for yearly simulations. Otherwise the output is ``NaN``.

This function is used to compute the Levelised Cost of Electricity (LCOE) of the designed PV system. On clicking the FINANCIALS button in the GUI, a dialog box appears into which the user has to enter the financial parameters of the system.

.. figure:: ../doc_images/financials_parameters.png
   :width: 350
  
   Financial Parameters of the system.

Choose the scenario for performing the LCOE calculations. There are two possible options: use the same module until the required years, or the modules are replaced by new technology ones until the required years. For the former option, no further steps are required.

*If New technology modules replaced till required years is chosen*

   Select the financial growth rate of the PV technology.

.. figure:: ../doc_images/financials_growth_rate.png
   :width: 350
  
   Select growth rate of chosen technology.

   The results are plotted once the simulations are completed, as shown in :numref:`fig-financials_lcoe` and the results are stored in the variable ``LCOE_output``.

.. figure:: ../doc_images/financials_lcoe.png
   :width: 350
   :name: fig-financials_lcoe
  
   LCOE results.

A snippet of the variable ``LCOE_output`` is shown in :numref:`fig-financials_output`. This is obtained after performing the financial calculations and holds the value of the levelised cost of electricity of the defined system ``LCOE_1`` and present value of the total levelised cost during system lifetime ``SystemCost_dis_1``. Moreover, this output also stores the energy produced during every year of operation of the system and total energy produced during the PV system's operational life ``Energy_1`` and ``Energy_dis_1``. The value `1` denotes the scenario used for the simulations and can change up to `3` based on user inputs.

.. figure:: ../doc_images/financials_output.png
   :width: 400
   :name: fig-financials_output
  
   ``LCOE_output`` variable.

The input variable ``TOOLBOX_input`` now contains the final input field from the simulations, called ``FinancialPart``. This variable includes the inputs to the financial simulations such as the cost of the system and the discount rate for the LCOE calculations.

.. figure:: ../doc_images/input_after_financials.png

   The updated ``TOOLBOX_input`` variable after FINANCIALS.

This concludes the simulations from the GUI. In the next section, the script version of the PVMD TOOLBOX will be illustrated.

3.2 PVMD Toolbox Script Version
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The PVMD Toolbox also includes a script version, where the user can run the simulations without having to use the GUI. The script version can be run using two files:

1. The toolbox input struct creator
2. The function PVMD toolbox script

Below one can find a snippet of the input struct creator function

.. code-block:: matlab

   function TB_input_creator(outputName)

   disp('Generating Input Struct for TOOLBOX...');
   % Needs to be true for the script version to run
   TOOLBOX_input.script = true; 

   % If true cell part of toolbox is called
   TOOLBOX_input.runDeviceOptic = true;

   % Set to true for genpro simulations
   TOOLBOX_input.deviceOptic.runGenPro = false;

   % Loading GenPRO file, change for new simulations, change if runGenPro is true
   TOOLBOX_input.deviceOptic.GenProFile = 'MonoPERC.mat';

   % Type of cell selected for simulations
   celltype = TOOLBOX_input.deviceOptic.GenProFile; 

   if contains(celltype,'Tandem')
       celltype = 'tandem';
   elseif contains(celltype,'Bifacial')
       celltype = 'bifacial';
   else
       celltype = 'normal';
   end

Within this function, all variables (logical as well as input data) are assigned and output for use in the toolbox. The logical variable ``TOOLBOX_input.deviceOptic.runGenPro`` has been set to ``false``. This means that GenPro will not be run when using the script version. However, if a user wishes to run GenPro, then this logical value can be changed to ``true``. Similarly, this function includes the assignment statements for all the input variables used to run the toolbox and can be changed by the user based on their requirements.

In order to run this function, type ``TB_input_creator(outputName)`` in the command window, being outputName the *.mat* filename where the input structure was saved. Before running the script, if the user wishes to change certain parameters, follow the comments mentioned in the function and change the values accordingly.

Once the input struct has been created, use this to run the script version by typing ``TB_script('outputName.mat')`` in the MATLAB command window. This will start running the functions within the toolbox. Once a function has finished calculations, a message will be displayed on the command window.

4. Software limitations
-----------------------

The following have been specified as scope for future improvements by the developers of this Toolbox:

#. This version has certain functions which are semi-automated (eg: Non-periodic simulations required multiple programs)
#. Run-time for very large datasets (such as yearly simulations) will be very high
#. Assigning materials to external 3D objects during non-periodic simulations is cumbersome
#. Selection of points to place panels on surfaces of external 3D objects in non-periodic simulations is primitive
#. Re-configurable modules are only possible for specific cases

5. Version summary
------------------

The PVMD TOOLBOX 2.0 has the following updates:

#. Conversion of GUIDE based GUI to MATLAB App Developer platform.
#. Inclusion of PV systems with non-periodic properties (such as shading, difference in incident irradiation & cell temperatures)
#. Capability to model electrically re-configurable modules
#. New feature to determine and visualize the degradation performance of PV panels in extensive detail
#. Enumerate the financial performance of user-defined PV system by computing the LCOE of the system

6. Acknowledgements
-------------------

The PVMD TOOLBOX 2.0 has been designed and developed by the following members of the PVMD Group:

#. Dr. Rudi Santbergen
#. Dr. Malte Vogt
#. Dr. Miro Zeman
#. Dr. Olindo Isabella
#. Alba Alcañiz Moya
#. Andres Calcabrini
#. Karthik Ganapathi Subramanian
#. Abhishek Velpuru
#. Devyani Salokhe
#. Elias Garcia Goma
#. Julien Garo Etxebarria
#. Ignacio Narváez Alavez
#. Zidan Wang
#. Tim Stark
#. Abdallah Nour el Din

7. References
-------------

.. [1] R. Santbergen *et al.*, "ASA Software for Opto-Electrical Simulation of Silicon, CIGS and Perovskite Solar Cells" presented at the Asian PVSEC, Xian (China), 2019

.. [2] D. Geisler-Moroder and A. Dür "A new Ward BRDF model with bounded albedo" *Computer Graphics Forum* (2010), 29(4): 1391--1398

.. [3] R. Santbergen *et al.*, "GenPro4 Optical Model for Solar Cell Simulation and Its Application to Multijunction Solar Cells" *IEEE J. Photovoltaics* (2017), vol. 7, no. 3, pp. 919--926, doi: 10.1109/JPHOTOV.2017.2669640.

.. [4] R. Santbergen *et al.*, "Calculation of irradiance distribution on PV modules by combining sky and sensitivity maps" *Sol. Energy* (2017), vol. 150, pp. 49--54, doi: 10.1016/j.solener.2017.04.036

.. [5] F. F. Sönmez *et al.* "Fast and accurate ray-casting-based view factor estimation method for complex geometries" *Solar Energy Materials and Solar Cells* (2019) 200: 109934

.. [6] R. Perez *et al.* "All-weather model for sky luminance distribution---Preliminary configuration and validation" *Solar Energy* (1993), vol. 50, no. 3, pp. 235--245, doi: 10.1016/0038-092X(93)90017-I.

.. [7] C. Gueymard, "Simple Model for the Atmospheric Radiative Transfer of Sunshine (SMARTS2) Algorithms and performance assessment" p. 84.

.. [8] M. K. Fuentes, "A Simplified Thermal Model for Flat-Plate Photovoltaic Arrays" p. 60.

.. [9] D. Salokhe "Control Strategies for Reconfigurable PV Modules" *Delft University of Technology* (2021)

.. [10] I. Kaaya *et al.* "Photovoltaic Lifetime Forecast: Models for long-term photovoltaic degradation prediction and forecast" *UMA Editorial PP* (2020), pp. 22--32. doi: https://hdl.handle.net/10630/19789.3

.. [11] W. Boyson *et al.* "Performance model for grid-connected photovoltaic inverters" SAND2007-5036, 920449 (2007) doi: 10.2172/920449.

PVMD Group, Delft University of Technology, Delft, the Netherlands

©All rights reserved

Appendix
--------

.. _appendix_A:

A. Information on material reflectances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The material reflectance data which is provided from NASA's ECOSTRESS Library contains the reflectivity of the material for every wavelength in the range of 300 nm to 15000 nm. A sample of the data provided by NASA is shown in :numref:`fig-appendix_material_reflectance`. As this toolbox is used for solar simulations, we are interested in the wavelength range of 250 - 1500 nm.

.. figure:: ../doc_images/appendix_material_reflectance.png
   :width: 350
   :name: fig-appendix_material_reflectance

   Material reflectance from the NASA Library.

Therefore, data provided by NASA beyond 1500 nm is truncated to match the required wavelength range. Moreover, to obtain data in the range of 250-300 nm, the reflectivity is linearly extrapolated. However, the data in this material library cannot be directly used in the toolbox, and has to be converted to a syntax which can be used by Radiance's ray-tracing engine. This is because Radiance uses the following syntax:

::

   void primitive material_name
   0
   0
   5 R G B 0 0

Within this definition, the reflectance values are stored in the 3 channels marked in bold (R,G & B). The reflectivity stored in these channels lie in the range 0-1. In order to convert the vast dataset provided by NASA into these 3 values, we use the term spectrally integrated albedo \[a1\]. The formula to convert this dataset is:

.. math::

   \alpha(y) = \frac{\int_{\lambda_1}^{\lambda_2} R_y(\lambda) \cdot E_x(\lambda) d\lambda}{\int_{\lambda_1}^{\lambda_2} E_x(\lambda) d\lambda}

Where, :math:`\alpha(y)` is the final albedo stored in the channels R, G and B, :math:`R_y` is the spectral reflectance of the chosen material [%], :math:`E_x` is the spectral irradiance [W/m2], :math:`\lambda_1` and :math:`\lambda_2` define the wavelengths [m] in the spectrum used as the limits of integration.

In the simulations used in the toolbox, the default wavelength ranges are as follows:

* Channel 1: 250 - 380 nm (UV range)
* Channel 2: 381 - 760 nm (Visible range)
* Channel 3: 761 - 1500 nm (IR range)

These integration limits are the ones which are updated when the user uses the option Update material library in non-periodic simulations. Depending on the chosen cell chemistry and its response to different kinds of incident radiation (or in other words, the spectral response of a solar cell), the user can change the integration limits to improve the accuracy of the simulations.

This is the reason why the use of material data from the *.mtl* file is not recommended. Firstly, the data stored in *.mtl* files contain the R, G and B reflectivity of a material (the colour of the surface). As this data does not capture the reflectivity of the entire spectrum, the results produced using these values will also be incorrect.

.. _appendix_B:

B. Information on Radiance subclasses and testpoints
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

B.1 Radiance subclasses
^^^^^^^^^^^^^^^^^^^^^^^

In Appendix :ref:`appendix_A`, the material definition and its syntax in Radiance was provided in the material definition syntax. Within this definition, the term primitive defines the class the material belongs to. The class of a material represents the typical characteristic texture of a surface assigned this material. For example, if a material is assigned to the primitive metal, it will have the typical characteristic texture of a metal. This is used by Radiance during the ray-tracing simulation to accurately model reflections.

Four primitives are used in the PVMD toolbox: glass, mirror, plastic and metal. For highly reflective materials, mirror is used and for highly transparent materials, glass is used. Other general materials are assigned to plastic or metal. Within the toolbox, these primitives are called the Radiance subclass, as was shown in :ref:`subsection-module_non_per`.

B.2 Testpoints
^^^^^^^^^^^^^^

Radiance uses a backward ray tracing simulator, in which the rays are traced back from the sensor to the source. In the toolbox, the sensors are called testpoints, as these are the points at which the plane of array irradiance on the solar cells are computed. In a simulation, the maximum number of testpoints which can be defined are 4 per cell, owing to computational constraints. Using a single testpoint is also not recommended, as this leads to binary shading simulations (a cell is completely shaded or completely unshaded). A picture how the testpoints look on a cell is shown in the figure below.

.. figure:: ../doc_images/appendix_testpoints.png
   :width: 350
  
   Sensors (testpoints) for the backward ray-tracing.

A standard testpoint definition has the following data: 1) the coordinates of a testpoint and 2) the surface normal to define the direction in which the rays travel to the source. For rear cells, the direction normal will be pointing to the ground and for the front cells, they will point to the sky.

.. _appendix_C:

C. Downloading *.tif* files for horizon reconstruction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*.tif* files include LiDAR data that can be read to reconstruct the horizon. They are really heavy, hence they should be downloaded, used and then removed or the computer will run out of space easily. For the Netherlands, LiDAR data can be downloaded from the [pdok webpage](https://downloads.pdok.nl/ahn3-downloadpage/). Select the region of interest in the interactive map, and download the file in the format *0,5 meter raster dsm*. Save it in the path 3_WEATHER\>Input\>horizon_reconstruction for periodic simulations, and in 2_MODULE\>Non-Periodic\>Inputs\>Height data for periodic ones.

.. _appendix_D:

D. User Specified template for power optimizers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While using power optimizers, there is an option called *User specified* where the user can provide the electrical parameters of an external inverter or power optimizer for use in the toolbox. To access the template file *.xlsx* for power optimizers, go to: 7_CONVERSION\>Codes\>Power Optimizer Manufacturers\>User Specified\>Template.xlsx. To access the template file *.xlsx* for inverters in power optimizers, go to  PVMD Toolbox 7_CONVERSION\>Codes\>Inverter Manufacturers\>User Specified\>Template.xlsx.

On opening the excel file, the following table is shown. The template is the same for both inverters and Power Optimizers.

.. figure:: ../doc_images/appendix_user_specified.png
  
   User Specified Inverters/Power Optimizers.

Enter the corresponding the values and save the file. When prompted to choose the type of power optimizer and corresponding inverter, choose the template file and run the simulations.
